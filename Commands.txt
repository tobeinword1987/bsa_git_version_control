1."Работа с историей изменений".
1. которая выводит сообщения и автора всех коммитов из ветки develop-feature1, которые сделаны за последние 3 часа и которых нет в родительских ветках (develop, master). Сортировка по дате, первые более новые.

git log --name-status develop master..develop-feature1 --after="3 hours ago" --reverse

2. выводит для каждого коммита из веток master, develop, в сообщении которых есть упоминание заданного номера задачи (допустим задачи 231), его сообщение, автора и дату. Сортировка по дате, первые более новые.

git log master develop --grep 231 --reverse

2. "Избирательное слияние"
Дано: После слияния ветки develop-feature1 в develop, вы продолжили работать в ветке develop-feature1, а develop отдали на тестирование, потом исправили ошибку и закоммитили исправление в develop-feature1, сделали push. Через какое-то время тим лид говорит, что это критический фикс, и надо включить его в develop. Вы делаете pull в ветке develop-feature1 и оказывается, что ваш коллега сделал еще 3 коммита после вашего, и они не стабильные, поэтому не должны быть включены в develop. 
Задание: как добавить в develop только ваш коммит, но чтобы 3 коммита после него в develop не попали?

 git checkout  develop (переключаемя на ветку develop)

 git log develop-feature1 ( находим хеш код коммита с ветки develop-feature1, который является hotfix)

 git cherry-pick 453b187 ( добавляем необходимый коммит в ветку develop)

 git push origin develop ( заливаем на сервер)

3. "Исправление ошибок"
Дано: Вы начали работу над новой фичей и создали от develop дочернюю ветку develop-feature3.
Сделали там несколько коммитов, и синхронизировались с сервером - все ваши изменения теперь в develop-feature3 на сервере. И тут вы вспомнили, что тим лид строго настрого сказал, что сообщение каждого коммита должно быть форматировано определенным образом (см. примечание п.0) и обязательно содержать номер задачи. А вы об этом забыли и теперь на сервере лежит ветка develop-feature1с “плохими” сообщениями. Задание: Предложите вариант, как наиболее просто исправить ситуацию, чтобы тим лид не увидел ваш промах.

 git commit --amend -m "your new message" (изменение сообщения последнего коммита, который еще был не синхронизирован с сервером)

 Если коммиты еще не залиты на сервер, то их можно поправить одной коммандой

 git rebase --interactive 432b187 (хеш код должен быть родителем коммитов, сообщения, которых мы собираемся править. После данной комманды откроется редактор, в котором необходимо установить комманды reword вместо комманды pick и сохранить файл. При этом откроется редактор, в котором необходимо ввести новые коммиты и сохранить файл)

 При изменении сообщений коммитов, происходит изменение их хеш кодов. Поэтому данную операцию не рекомендуют проводить на сервере, так как существует опасность того, что некоторые люди уже могли скачать все обновления с сервера и работать с неправильными коммитами.


Чтобы не заметил Team lead:
git checkout develop-feature3
git commit --amend -m "your new message1" (или git rebase –interactive b2f1910b9490b8142441268693e7f4d5a938ad19)
git pull origin develop-feature3
git push origin develop-feature3
